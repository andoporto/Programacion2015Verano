<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0052)http://c.conclase.net/curso/index.php?cap=033#inicio -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="es"><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="description" content="Cursos de C++, POO y programación Windows, API32, CSS, con lista de correo asociada.">
<meta name="keywords" content="C, C++, C/C++, curso, programación, POO, lista, correo, windows, tutorial, programas, API32, CSS">
<title>Curso de C++ - Modificadores para miembros</title>

<link rel="StyleSheet" href="./Curso de C++ - Modificadores para miembros_files/conclase.css.php" title="Estilo con Clase" media="Screen" type="text/css">
<link rel="stylesheet" href="./Curso de C++ - Modificadores para miembros_files/barras.css.php" title="Estilo con Clase" media="screen" type="text/css">
<link rel="alternate" type="application/atom+xml" title="C con Clase RSS" href="http://c.conclase.net/include/conclase_rss.php">
<link rel="shortcut icon" href="http://c.conclase.net/include/favicon.ico">
<script id="__isTpiViewExists"></script><link rel="stylesheet" type="text/css" href="chrome-extension://noebaifjopccondbkcieccphcpijhdne/css/about.css"></head>

<body style="background-position: 0% 34px; " class="backgroundPositionTuned">
   <div id="headerHolder">
	<div id="header">
<div id="subtitulo">&nbsp;C++ con Clase&nbsp;</div>
<div id="sombra">Curso de C++</div>
<div id="titulo">Curso de C++</div>
<div id="estilo">
<form action="http://c.conclase.net/curso/index.php?ext=estilo&cap=033" method="post">
<label for="estilo">Estilo:</label>
<select name="nombre">
<option value="1">Esmeralda</option>
<option value="2" selected="selected">Normal</option>
<option value="3">estilo3</option>
<option value="4">estilo4</option>
<option value="5">estilo5</option>
<option value="6">estilo6</option>
<option value="7">estilo7</option>
<option value="8">estilo8</option>
<option value="9">estilo9</option>
<option value="10">estilo10</option>
<option value="13">B/W</option>
<option value="14">rgb</option>
<option value="15">Estilo 11</option>
</select>
<input type="submit" name="Submit" value="Activar">
</form>
</div>
<div id="visitas"><img src="./Curso de C++ - Modificadores para miembros_files/contador.php" alt="0006114392"><br>Visitas desde 2000-09-09
<br><a href="http://c.conclase.net/?id=usrs"><img src="./Curso de C++ - Modificadores para miembros_files/contador(1).php" alt="0132" border="0"></a><br>Usuarios en línea</div>
		<div id="navigation">
			<ul id="tabs">
				<li id="tab01" class="taboff"><a href="http://conclase.net/" title="Página de entrada">Con Clase</a></li>
				<li id="tab02" class="tabon"><a href="http://c.conclase.net/" title="C ++ con Clase">C++</a></li>
				<li id="tab03" class="taboff"><a href="http://winapi.conclase.net/" title="Win API 32 con Clase">Win API 32</a></li>
				<li id="tab04" class="taboff"><a href="http://html.conclase.net/" title="HTML y CSS con Clase">HTML y CSS</a></li>
				<li id="tab05" class="taboff"><a href="http://graficos.conclase.net/" title="Gráficos con Clase">Gráficos</a></li>
				<li id="tab06" class="taboff"><a href="http://mysql.conclase.net/" title="MySQL con Clase">MySQL</a></li>
				<li id="tab07" class="taboff"><a href="http://articulos.conclase.net/" title="Artículos con Clase">Artículos</a></li>
				<li id="tab08" class="taboff"><a href="http://listas.conclase.net/" title="Listas de correo con Clase">Listas</a></li>
			</ul>
		</div>
	</div>
</div>
		<div id="navigationBarra">
			<ul id="tabsBarraC">
          <li id="tabBarra01"><a href="http://c.conclase.net/curso/index.php?cap=032#inicio" title="Cap ant">&lt;&lt;</a></li>
          <li id="tabBarra02"><a href="http://c.conclase.net/curso/index.php?cap=032#inicio" title="Pág ant">&lt;</a></li>
          <li id="tabBarra03"><a href="http://c.conclase.net/curso/index.php?cap=034#inicio" title="Pág sig">&gt;</a></li>
          <li id="tabBarra04"><a href="http://c.conclase.net/curso/index.php?cap=034#inicio" title="Cap sig">&gt;&gt;</a></li>
			</ul>
			<ul id="tabsBarraL">
          <li id="tabBarra05"><a href="http://c.conclase.net/curso/#inicio" title="Curso">Curso</a></li>
          <li id="tabBarra06"><a href="http://c.conclase.net/?id=listacorreo#inicio" title="Preguntas">Info</a></li>
          <li id="tabBarra07"><a href="http://c.conclase.net/librerias/#inicio" title="Bibliotecas ANSI C">Bibliotecas</a></li>
          <li id="tabBarra08"><a href="http://c.conclase.net/curso/?cap=tabla#inicio" title="Tabla de contenido">Tabla</a></li>
          <li id="tabBarra09"><a href="http://c.conclase.net/curso/?ext=comentario&cap=033#inicio" title="Insertar comentario">Comentario</a></li>
			</ul>
		</div>
<div id="cuerpo">
<!-- Parte izquierda -->
<div id="izquierda">
<!-- Menú -->
<div id="menu">
<ul> <!-- capítulos -->
<li><a href="http://c.conclase.net/curso/index.php?cap=000#inicio" title="Introducción"><span class="numero">&nbsp;</span>Introducción</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=001#inicio" title="Toma de contacto"><span class="numero">1 </span>Toma de contacto</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=002#inicio" title="Tipos de variables I "><span class="numero">2 </span>Tipos de variables I </a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=003#inicio" title="Funciones I: Declaración y definición"><span class="numero">3 </span>Funciones I</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=004#inicio" title="Operadores I"><span class="numero">4 </span>Operadores I</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=005#inicio" title="Sentencias"><span class="numero">5 </span>Sentencias</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=006#inicio" title="Declaración de variables"><span class="numero">6 </span>Declaración de variables</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=007#inicio" title="Normas para la notación"><span class="numero">7 </span>Notación</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=008#inicio" title="Cadenas de caracteres"><span class="numero">8 </span>Cadenas de caracteres</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=009#inicio" title="Conversión de tipos"><span class="numero">9 </span>Conversión de tipos</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=010#inicio" title="Tipos de variables II: Arrays"><span class="numero">10 </span>Variables II: Arrays</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=011#inicio" title="Tipos de objetos III: Estructuras"><span class="numero">11 </span>Objetos III: Estructuras</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=012#inicio" title="Tipos de objetos IV: Punteros 1"><span class="numero">12 </span>Objetos IV: Punteros 1</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=013#inicio" title="Operadores II: Más operadores"><span class="numero">13 </span>Operadores II</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=014#inicio" title="Operadores III: Precedencia"><span class="numero">14 </span>Oper III: Precedencia</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=015#inicio" title="Funciones II: Parámetros por valor y por referencia"><span class="numero">15 </span>Funcs II: valor y referencia</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=016#inicio" title="Tipos de variables V: Uniones"><span class="numero">16 </span>Variables V: Uniones</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=017#inicio" title="Tipos de variables VI: Punteros 2"><span class="numero">17 </span>Variables VI: Punteros 2</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=018#inicio" title="Operadores IV: Más operadores "><span class="numero">18 </span>Operadores IV</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=019#inicio" title="Definición de tipos, tipos derivados"><span class="numero">19 </span>Definición de tipos</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=020#inicio" title="Funciones III: más cosas"><span class="numero">20 </span>Funciones III: más cosas</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=021#inicio" title="Funciones IV: Sobrecarga"><span class="numero">21 </span>Funciones IV: Sobrecarga</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=022#inicio" title="Operadores V: Operadores sobrecargados"><span class="numero">22 </span>Operadores V: Sobrecarga</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=023#inicio" title="El preprocesador"><span class="numero">23 </span>El preprocesador</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=024#inicio" title="Funciones V: Recursividad"><span class="numero">24 </span>Funciones V: Recursividad</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=025#inicio" title="Variables VII: Tipos de almacenamiento"><span class="numero">25 </span>Vbls VII: Almacenamiento</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=026#inicio" title="Espacios con nombre"><span class="numero">26 </span>Espacios con nombre</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=027#inicio" title="Clases I: definiciones"><span class="numero">27 </span>Clases I: definiciones</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=028#inicio" title="Declaración de una clase"><span class="numero">28 </span>Declaración de una clase</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=029#inicio" title="Constructores"><span class="numero">29 </span>Constructores</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=030#inicio" title="Destructores"><span class="numero">30 </span>Destructores</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=031#inicio" title="El puntero this"><span class="numero">31 </span>El puntero this</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=032#inicio" title="Sistema de protección"><span class="numero">32 </span>Sistema de protección</a></li>
<li><a href="./Curso de C++ - Modificadores para miembros_files/Curso de C++ - Modificadores para miembros.htm" title="Modificadores para miembros"><span class="numero">33 </span>Modificadores</a>
<ul> <!-- Niv0 -->
<li><a href="http://c.conclase.net/curso/index.php?cap=033#MOD_INLINE" title="Funciones en línea (inline)">Funciones inline</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=033#MOD_CONST" title="Funciones miembro constantes">Funciones constantes</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=033#MOD_STATIC" title="Miembros estáticos de una clase (Static)">Miembros estáticos</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=033#MOD_reservadas" title="Palabras reservadas usadas en este capítulo">Palabras reservadas 33</a></li>
</ul><!-- Niv1 -->
</li>
<li><a href="http://c.conclase.net/curso/index.php?cap=034#inicio" title="Más sobre las funciones"><span class="numero">34 </span>Más sobre las funciones</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=035#inicio" title="Operadores sobrecargados"><span class="numero">35 </span>Operadores sobrecargados</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=036#inicio" title="Herencia"><span class="numero">36 </span>Herencia</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=037#inicio" title="Funciones virtuales"><span class="numero">37 </span>Funciones virtuales</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=038#inicio" title="Derivación múltiple"><span class="numero">38 </span>Derivación múltiple</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=039#inicio" title="Trabajar con ficheros"><span class="numero">39 </span>Trabajar con ficheros</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=040#inicio" title="Plantillas"><span class="numero">40 </span>Plantillas</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=041#inicio" title="Punteros a miembros de clases o estructuras"><span class="numero">41 </span>Punteros a miembros</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=042#inicio" title="Castings en C++"><span class="numero">42 </span>Castings en C++</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=043#inicio" title="Manejo de excepciones"><span class="numero">43 </span>Manejo de excepciones</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=900#inicio" title="Codificación ASCII"><span class="numero">A </span>Codificación ASCII</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=901#inicio" title="Palabras reservadas"><span class="numero">B </span>Palabras reservadas</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=902#inicio" title="Bibliotecas estándar"><span class="numero">C </span>Bibliotecas estándar</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=903#inicio" title="Trigrafos y símbolos alternativos"><span class="numero">D </span>Trigrafos y símbolos alt.</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=904#inicio" title="Streams"><span class="numero">E </span>Streams</a></li>
</ul> <!-- capítulos -->
</div>
</div> <!-- izquierda -->
<div id="derecha">
<a name="inicio"></a>
<div class="texto">
<h1>33 Modificadores para miembros</h1>
<div class="titulo_flecha"><a href="./Curso de C++ - Modificadores para miembros_files/Curso de C++ - Modificadores para miembros.htm">^</a></div>

<p>Existen varias alternativas a la hora de definir algunos de los miembros de 
  las clases. Esto es lo que veremos en este capítulo. Estos modificadores 
  afectan al modo en que se genera el código de ciertas funciones y datos, 
  o al modo en que se tratan los valores de retorno.</p>
<a name="MOD_INLINE"></a></div>
<div class="texto">
<h2>Funciones en línea (inline)</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Modificadores para miembros_files/Curso de C++ - Modificadores para miembros.htm">^</a></div>

<p>A menudo nos encontraremos con funciones miembro cuyas definiciones son muy 
  pequeñas. En estos casos suele ser interesante declararlas como inline. 
  Cuando hacemos eso, el código generado para la función cuando 
  el programa se compila, se inserta en el punto donde se invoca a la función, 
  en lugar de hacerlo en otro lugar y hacer una llamada. </p>
<p>Esto nos proporciona una ventaja, el código de estas funciones se ejecuta 
  más rápidamente, ya que se evita usar la pila para pasar parámetros 
  y se evitan las instrucciones de salto y retorno. También tiene un 
  inconveniente: se generará el código de la función tantas veces como ésta 
  se use, con lo que el programa ejecutable final puede ser mucho más 
  grande.</p>
<p>Es por esos dos motivos por los que sólo se usan funciones inline cuando 
  las funciones son pequeñas. Hay que elegir con cuidado qué funciones 
  declararemos inline y cuales no, ya que el resultado puede ser muy diferente 
  dependiendo de nuestras decisiones.</p>
<p>Hay dos maneras de declarar una función como inline.</p>
<p>La primera ya la hemos visto. Las funciones que se definen dentro de la declaración 
  de la clase son inline implícitamente. Por ejemplo:</p>
<pre class="ejemplo"><span class="cpp">class</span> Ejemplo {
  <span class="cpp">public</span>:
   Ejemplo(<span class="cpp">int</span> a = 0) : A(a) {}

  <span class="cpp">private</span>:
   <span class="cpp">int</span> A;
};
</pre>

<p>En este ejemplo hemos definido el constructor de la clase Ejemplo dentro 
  de la propia declaración, esto hace que se considere como inline. Cada 
  vez que declaremos un objeto de la clase Ejemplo se insertará el código 
  correspondiente a su constructor.</p>
<p>Si queremos que la clase Ejemplo no tenga un constructor inline deberemos 
  declararla y definirla así:</p>
<pre class="ejemplo"><span class="cpp">class</span> Ejemplo {
  <span class="cpp">public</span>:
   Ejemplo(<span class="cpp">int</span> a = 0);
 
  <span class="cpp">private</span>:
   <span class="cpp">int</span> A;
};
 
Ejemplo::Ejemplo(<span class="cpp">int</span> a) : A(a) {}
</pre>

<p>En este caso, cada vez que declaremos un objeto de la clase Ejemplo se hará 
  una llamada al constructor y sólo existirá una copia del código 
  del constructor en nuestro programa.</p>
<p>La otra forma de declarar funciones inline es hacerlo explícitamente, 
  usando la palabra reservada <b>inline</b>. En el ejemplo anterior sería 
  así:</p>
<pre class="ejemplo"><span class="cpp">class</span> Ejemplo {
  <span class="cpp">public</span>:
   Ejemplo(<span class="cpp">int</span> a = 0);
 
  <span class="cpp">private</span>:
   <span class="cpp">int</span> A;
};
 
<span class="cpp">inline</span> Ejemplo::Ejemplo(<span class="cpp">int</span> a) : A(a) {}
</pre>

<a name="MOD_CONST"></a></div>
<div class="texto">
<h2>Funciones miembro constantes</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Modificadores para miembros_files/Curso de C++ - Modificadores para miembros.htm">^</a></div>

<p>Esta es una propiedad que nos será muy útil en la depuración 
  de nuestras clases. Además proporciona ciertos mecanismos necesarios para mantener la
  protección de los datos.</p>
<p>Cuando una función miembro no deba modificar el valor de ningún dato 
  de la clase, podemos y debemos declararla como constante. Esto evitará 
  que la función intente modificar los datos del objeto; pero como, a fin de cuentas, el 
  código de la función lo escribimos nosotros; el compilador nos ayudará generando un 
  error durante la compilación si la función intenta modificar alguno de 
  los datos miembro del objeto, ya sea directamente o de forma indirecta.</p>
<p>Por ejemplo:</p>
<pre class="ejemplo"><span class="prp">#include</span> &lt;iostream&gt;
<span class="cpp">using</span> <span class="cpp">namespace</span> std;
 
<span class="cpp">class</span> Ejemplo2 {
  <span class="cpp">public</span>:
   Ejemplo2(<span class="cpp">int</span> a = 0) : A(a) {}
   <span class="cpp">void</span> Modifica(<span class="cpp">int</span> a) { A = a; }
   <span class="cpp">int</span> Lee() <span class="cpp">const</span> { <span class="cpp">return</span> A; }
   
  <span class="cpp">private</span>:
   <span class="cpp">int</span> A;
};
 
<span class="cpp">int</span> main() {
   Ejemplo2 X(6);
 
   cout &lt;&lt; X.Lee() &lt;&lt; endl;
   X.Modifica(2);
   cout &lt;&lt; X.Lee() &lt;&lt; endl;
    
   <span class="cpp">return</span> 0;
}
</pre>

<p>Para experimentar, comprueba lo que pasa si cambias la definición de 
  la función "Lee()" por estas otras:</p>
<pre class="ejemplo"><span class="cpp">int</span> Lee() <span class="cpp">const</span> { A++; <span class="cpp">return</span> A; }
<span class="cpp">int</span> Lee() <span class="cpp">const</span> { Modifica(A+1); <span class="cpp">return</span> A; }
<span class="cpp">int</span> Lee() <span class="cpp">const</span> { Modifica(3); <span class="cpp">return</span> A; }
</pre>

<p>Verás que el compilador no lo permite.</p>
<p>Evidentemente, si somos nosotros los que escribimos el código de la función, 
  sabemos si la función modifica o no los datos, de modo que en rigor no 
  necesitamos saber si es o no constante, pero frecuentemente otros 
  programadores pueden usar clases definidas por nosotros, o nosotros las 
  definidas por otros. En ese caso es frecuente que sólo se disponga
  de la declaración de la clase, y el modificador "const" nos dice si cierto 
  método modifica o no los datos del objeto.</p>
<p>Consideremos también que la función puede invocar a otras funciones, y
  usar este modificador nos asegura que ni siquiera esas funciones modifican
  datos del objeto.</p>
</div>
<div class="texto">
<h2><a name="MOD_RETCONST"></a>Valores de retorno constantes</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Modificadores para miembros_files/Curso de C++ - Modificadores para miembros.htm">^</a></div>

<p>Otra técnica muy útil y aconsejable en muchos casos es usar valores 
  de retorno de las funciones constantes, en particular cuando se usen para 
  devolver punteros miembro de la clase.</p>
<p>Por ejemplo, supongamos que tenemos una clase para cadenas de caracteres:</p>
<pre class="ejemplo"><span class="cpp">class</span> cadena {
   <span class="cpp">public</span>:
      cadena();        // Constructor por defecto
      cadena(<span class="cpp">const</span> <span class="cpp">char</span> *c); // Constructor desde cadena c
      cadena(<span class="cpp">int</span> n); // Constructor para cadena de n caracteres
      cadena(<span class="cpp">const</span> cadena &amp;);   // Constructor copia
      ~cadena();       // Destructor

      <span class="cpp">void</span> Asignar(<span class="cpp">const</span> <span class="cpp">char</span> *dest);
      <span class="cpp">char</span> *Leer(<span class="cpp">char</span> *c) {
         <a href="http://c.conclase.net/librerias/?ansifun=strcpy">strcpy</a>(c, cad);
         <span class="cpp">return</span> c;
      }
   <span class="cpp">private</span>:
      <span class="cpp">char</span> *cad;       // Puntero a <span class="cpp">char</span>: cadena de caracteres
};
</pre>

<p>Si te fijas en la función "Leer", verás que devuelve 
  un puntero a la cadena que pasamos como parámetro, después de 
  copiar el valor de cad en esa cadena. Esto es necesario para mantener la protección 
  de cad, si nos limitáramos a devolver ese parámetro, el programa 
  podría modificar la cadena almacenada a pesar de se cad un miembro privado:</p>
<pre class="ejemplo">      <span class="cpp">char</span> *Leer() { <span class="cpp">return</span> cad; }
</pre>

<p>Para evitar eso podemos declarar el valor de retorno de la función "Leer" 
  como constante:</p>
<pre class="ejemplo">      <span class="cpp">const</span> <span class="cpp">char</span> *Leer() { <span class="cpp">return</span> cad; }
</pre>

<p>De este modo, el programa que lea la cadena mediante esta función no 
  podrá modificar ni el valor del puntero ni su contenido. Por ejemplo:</p>
<pre class="ejemplo"><span class="cpp">class</span> cadena {
...
};
...
<span class="cpp">int</span> main() {
   cadena Cadena1("hola");
 
   cout &lt;&lt; Cadena1.Leer() &lt;&lt; endl; // Legal
   Cadena1.Leer() = cadena2;       // Ilegal
   Cadena1.Leer()[1] = 'O';        // Ilegal
}
</pre>

<a name="MOD_STATIC"></a></div>
<div class="texto">
<h2>Miembros estáticos de una clase (Static)</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Modificadores para miembros_files/Curso de C++ - Modificadores para miembros.htm">^</a></div>

<p>Ciertos miembros de una clase pueden ser declarados como <b>static</b>. Los 
  miembros <b>static</b> tienen algunas propiedades especiales.</p>
<p>En el caso de los datos miembro <b>static</b> sólo existirá una copia 
  que compartirán todos los objetos de la misma clase. Si consultamos el 
  valor de ese dato desde cualquier objeto de esa clase obtendremos siempre el 
  mismo resultado, y si lo modificamos, lo modificaremos para todos los objetos.</p>
<p>Por ejemplo:</p>
<pre class="ejemplo"><span class="prp">#include</span> &lt;iostream&gt;
<span class="cpp">using</span> <span class="cpp">namespace</span> std;
 
<span class="cpp">class</span> Numero {
  <span class="cpp">public</span>:
   Numero(<span class="cpp">int</span> v = 0);
   ~Numero();
   
   <span class="cpp">void</span> Modifica(<span class="cpp">int</span> v);
   <span class="cpp">int</span> LeeValor() <span class="cpp">const</span> { <span class="cpp">return</span> Valor; }
   <span class="cpp">int</span> LeeCuenta() <span class="cpp">const</span> { <span class="cpp">return</span> Cuenta; }
   <span class="cpp">int</span> LeeMedia() <span class="cpp">const</span> { <span class="cpp">return</span> Media; }
   
  <span class="cpp">private</span>:
   <span class="cpp">int</span> Valor;
   <span class="cpp">static</span> <span class="cpp">int</span> Cuenta;
   <span class="cpp">static</span> <span class="cpp">int</span> Suma;
   <span class="cpp">static</span> <span class="cpp">int</span> Media;
   
   <span class="cpp">void</span> CalculaMedia();
};
 
Numero::Numero(<span class="cpp">int</span> v) : Valor(v) { 
   Cuenta++; 
   Suma += Valor;
   CalculaMedia();
}
 
Numero::~Numero() {
   Cuenta--;
   Suma -= Valor;
   CalculaMedia();
}
 
<span class="cpp">void</span> Numero::Modifica(<span class="cpp">int</span> v) {
   Suma -= Valor;
   Valor = v; 
   Suma += Valor;
   CalculaMedia();
}
 
// Definición e inicialización de miembros estáticos
<span class="cpp">int</span> Numero::Cuenta = 0;
<span class="cpp">int</span> Numero::Suma = 0;
<span class="cpp">int</span> Numero::Media = 0;
 
<span class="cpp">void</span> Numero::CalculaMedia() {
   <span class="cpp">if</span>(Cuenta &gt; 0) Media = Suma/Cuenta;
   <span class="cpp">else</span> Media = 0;
}
 
<span class="cpp">int</span> main() {
   Numero A(6), B(3), C(9), D(18), E(3);
   Numero *X;
 
   cout &lt;&lt; "INICIAL" &lt;&lt; endl;
   cout &lt;&lt; "Cuenta: " &lt;&lt; A.LeeCuenta() &lt;&lt; endl;
   cout &lt;&lt; "Media:  " &lt;&lt; A.LeeMedia() &lt;&lt; endl;

   B.Modifica(11);
   cout &lt;&lt; "Modificamos B=11" &lt;&lt; endl;
   cout &lt;&lt; "Cuenta: " &lt;&lt; B.LeeCuenta() &lt;&lt; endl;
   cout &lt;&lt; "Media:  " &lt;&lt; B.LeeMedia() &lt;&lt; endl;
    
   X = <span class="cpp">new</span> Numero(548);
   cout &lt;&lt; "Nuevo elemento dinámico de valor 548" &lt;&lt; endl;
   cout &lt;&lt; "Cuenta: " &lt;&lt; X-&gt;LeeCuenta() &lt;&lt; endl;
   cout &lt;&lt; "Media:  " &lt;&lt; X-&gt;LeeMedia() &lt;&lt; endl;

   <span class="cpp">delete</span> X;   
   cout &lt;&lt; "Borramos el elemento dinámico" &lt;&lt; endl;
   cout &lt;&lt; "Cuenta: " &lt;&lt; D.LeeCuenta() &lt;&lt; endl;
   cout &lt;&lt; "Media:  " &lt;&lt; D.LeeMedia() &lt;&lt; endl;

   <span class="cpp">return</span> 0;
}
</pre>

<p class="codepad">Ejecutar este código en <a href="http://codepad.org/zQ27MC8N" target="_blank">codepad</a>.</p>
<p>Observa que es necesario declarar e inicializar los miembros <b>static</b> de la 
  clase, esto es por dos motivos. El primero es que los miembros <b>static</b> deben 
  existir aunque no exista ningún objeto de la clase, declarar la clase no 
  crea los datos miembro estáticos, en necesario hacerlo explícitamente. El 
  segundo es porque no lo hiciéramos, al declarar objetos de esa clase los 
  valores de los miembros estáticos estarían indefinidos, y los resultados 
  no serían los esperados.</p>
<p>En el caso de la funciones miembro <b>static</b> la utilidad es menos evidente. Estas 
  funciones no pueden acceder a los miembros de los objetos, sólo pueden 
  acceder a los datos miembro de la clase que sean <b>static</b>. Esto significa que 
  no tienen acceso al puntero <b>this</b>, y además suelen ser usadas con su nombre completo, 
  incluyendo el nombre de la clase y el operador de ámbito (::).</p>
<p>Por ejemplo:</p>
<pre class="ejemplo"><span class="prp">#include</span> &lt;iostream&gt;
<span class="cpp">using</span> <span class="cpp">namespace</span> std;
 
<span class="cpp">class</span> Numero {
  <span class="cpp">public</span>:
   Numero(<span class="cpp">int</span> v = 0);
   
   <span class="cpp">void</span> Modifica(<span class="cpp">int</span> v) { Valor = v; }
   <span class="cpp">int</span> LeeValor() <span class="cpp">const</span> { <span class="cpp">return</span> Valor; }
   <span class="cpp">int</span> LeeDeclaraciones() <span class="cpp">const</span> { <span class="cpp">return</span> ObjetosDeclarados; }
   <span class="cpp">static</span> <span class="cpp">void</span> Reset() { ObjetosDeclarados = 0; }
   
  <span class="cpp">private</span>:
   <span class="cpp">int</span> Valor;
   <span class="cpp">static</span> <span class="cpp">int</span> ObjetosDeclarados;
};
 
Numero::Numero(<span class="cpp">int</span> v) : Valor(v) { 
   ObjetosDeclarados++; 
}
 
<span class="cpp">int</span> Numero::ObjetosDeclarados = 0;
 
<span class="cpp">int</span> main() {
   Numero A(6), B(3), C(9), D(18), E(3);
   Numero *X;
 
   cout &lt;&lt; "INICIAL" &lt;&lt; endl;
   cout &lt;&lt; "Objetos de la clase Numeros: " 
        &lt;&lt; A.LeeDeclaraciones() &lt;&lt; endl;

   Numero::Reset();
   cout &lt;&lt; "RESET" &lt;&lt; endl;
   cout &lt;&lt; "Objetos de la clase Numeros: " 
        &lt;&lt; A.LeeDeclaraciones() &lt;&lt; endl;
   
   X = <span class="cpp">new</span> Numero(548);
   cout &lt;&lt; "Cuenta de objetos dinámicos declarados" &lt;&lt; endl;
   cout &lt;&lt; "Objetos de la clase Numeros: " 
        &lt;&lt; A.LeeDeclaraciones() &lt;&lt; endl;

   <span class="cpp">delete</span> X;   
   X = <span class="cpp">new</span> Numero(8);
   cout &lt;&lt; "Cuenta de objetos dinámicos declarados" &lt;&lt; endl;
   cout &lt;&lt; "Objetos de la clase Numeros: " 
        &lt;&lt; A.LeeDeclaraciones() &lt;&lt; endl;

   <span class="cpp">delete</span> X;
   <span class="cpp">return</span> 0;
}
</pre>

<p class="codepad">Ejecutar este código en <a href="http://codepad.org/2TTJ4Si0" target="_blank">codepad</a>.</p>
<p>Observa cómo hemos llamado a la función Reset con su nombre completo. 
  Aunque podríamos haber usado "A.Reset()", es más lógico 
  usar el nombre completo, ya que la función puede ser invocada aunque 
  no exista ningún objeto de la clase.</p>
<a name="MOD_reservadas"></a></div>
<div class="texto">
<h2>Palabras reservadas usadas en este capítulo</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Modificadores para miembros_files/Curso de C++ - Modificadores para miembros.htm">^</a></div>

<p><b>const</b>, <b>inline</b> y <b>static</b>.</p>
</div>
</div>
</div>
<div id="pie">
<p id="copyright">© Marzo de 2001, Salvador Pozo, <a href="mailto:salvador@conclase.net">salvador@conclase.net</a></p>
</div>


<div class="SkipThisFixedPosition top-iframe-wrapper" style="width: 100%; height: 34px; position: fixed; top: 0px !important; left: 0px; z-index: 99997; "><iframe style="width:100%;height:34px;top:0px;left:0px;" src="./Curso de C++ - Modificadores para miembros_files/container.htm" scrolling="no" class="toolbarContainer" frameborder="0px" id="CWTBiframe0"></iframe></div><div id="-chrome-auto-translate-plugin-dialog" style="opacity: 1 !important; background-image: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; background-color: transparent !important; padding-top: 0px !important; padding-right: 0px !important; padding-bottom: 0px !important; padding-left: 0px !important; margin-top: 0px !important; margin-right: 0px !important; margin-bottom: 0px !important; margin-left: 0px !important; position: absolute !important; top: 0px; left: 0px; overflow-x: visible !important; overflow-y: visible !important; z-index: 999999 !important; text-align: left !important; display: none; background-position: initial initial !important; background-repeat: initial initial !important; "><div style="max-width: 300px !important;color: #fafafa !important;opacity: 0.8 !important;border-color: #000000 !important;border-width: 0px !important;-webkit-border-radius: 10px !important;background-color: #363636 !important;font-size: 16px !important;padding: 8px !important;overflow: visible !important;background-image: -webkit-gradient(linear, left top, right bottom, color-stop(0%, #000), color-stop(50%, #363636), color-stop(100%, #000));z-index: 999999 !important;text-align: left  !important;"><div class="translate"></div><div class="additional"></div></div><img src="./Curso de C++ - Modificadores para miembros_files/small-logo.png" onclick="document.location.href=&#39;http://translate.google.com/&#39;;" style="position: absolute !important; z-index: -1 !important; right: 1px !important; top: -20px !important; cursor: pointer !important;-webkit-border-radius: 20px; background-color: rgba(200, 200, 200, 0.3) !important; padding: 3px 5px 0 !important; margin: 0 !important;"></div><div id="mainContainer_CTID"><div class="fixedDiv SkipThisFixedPosition UrlGadgetsDiv" style="position: fixed; left: 0px; top: 34px !important; z-index: 2147483640; "></div><div class="fixedDiv SkipThisFixedPosition GeneralGadgetsDiv" style="position: fixed; left: 0px; top: 34px !important; z-index: 2147483640; width: 100%; "></div></div></body><style type="text/css" id="CWToolbarStyle">html { padding-top: 34px !important;}</style></html>
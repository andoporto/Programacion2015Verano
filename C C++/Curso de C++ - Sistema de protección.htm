<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0052)http://c.conclase.net/curso/index.php?cap=032#inicio -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="es"><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="description" content="Cursos de C++, POO y programación Windows, API32, CSS, con lista de correo asociada.">
<meta name="keywords" content="C, C++, C/C++, curso, programación, POO, lista, correo, windows, tutorial, programas, API32, CSS">
<title>Curso de C++ - Sistema de protección</title>

<link rel="StyleSheet" href="./Curso de C++ - Sistema de protección_files/conclase.css.php" title="Estilo con Clase" media="Screen" type="text/css">
<link rel="stylesheet" href="./Curso de C++ - Sistema de protección_files/barras.css.php" title="Estilo con Clase" media="screen" type="text/css">
<link rel="alternate" type="application/atom+xml" title="C con Clase RSS" href="http://c.conclase.net/include/conclase_rss.php">
<link rel="shortcut icon" href="http://c.conclase.net/include/favicon.ico">
<script id="__isTpiViewExists"></script><link rel="stylesheet" type="text/css" href="chrome-extension://noebaifjopccondbkcieccphcpijhdne/css/about.css"></head>

<body style="background-position: 0% 34px; " class="backgroundPositionTuned">
   <div id="headerHolder" style="top: 34px !important; " class="SkipMeIAmAlradyAbsolutePushed">
	<div id="header">
<div id="subtitulo">&nbsp;C++ con Clase&nbsp;</div>
<div id="sombra">Curso de C++</div>
<div id="titulo">Curso de C++</div>
<div id="estilo">
<form action="http://c.conclase.net/curso/index.php?ext=estilo&cap=032" method="post">
<label for="estilo">Estilo:</label>
<select name="nombre">
<option value="1">Esmeralda</option>
<option value="2" selected="selected">Normal</option>
<option value="3">estilo3</option>
<option value="4">estilo4</option>
<option value="5">estilo5</option>
<option value="6">estilo6</option>
<option value="7">estilo7</option>
<option value="8">estilo8</option>
<option value="9">estilo9</option>
<option value="10">estilo10</option>
<option value="13">B/W</option>
<option value="14">rgb</option>
<option value="15">Estilo 11</option>
</select>
<input type="submit" name="Submit" value="Activar">
</form>
</div>
<div id="visitas"><img src="./Curso de C++ - Sistema de protección_files/contador.php" alt="0006114359"><br>Visitas desde 2000-09-09
<br><a href="http://c.conclase.net/?id=usrs"><img src="./Curso de C++ - Sistema de protección_files/contador(1).php" alt="0146" border="0"></a><br>Usuarios en línea</div>
		<div id="navigation">
			<ul id="tabs">
				<li id="tab01" class="taboff"><a href="http://conclase.net/" title="Página de entrada">Con Clase</a></li>
				<li id="tab02" class="tabon"><a href="http://c.conclase.net/" title="C ++ con Clase">C++</a></li>
				<li id="tab03" class="taboff"><a href="http://winapi.conclase.net/" title="Win API 32 con Clase">Win API 32</a></li>
				<li id="tab04" class="taboff"><a href="http://html.conclase.net/" title="HTML y CSS con Clase">HTML y CSS</a></li>
				<li id="tab05" class="taboff"><a href="http://graficos.conclase.net/" title="Gráficos con Clase">Gráficos</a></li>
				<li id="tab06" class="taboff"><a href="http://mysql.conclase.net/" title="MySQL con Clase">MySQL</a></li>
				<li id="tab07" class="taboff"><a href="http://articulos.conclase.net/" title="Artículos con Clase">Artículos</a></li>
				<li id="tab08" class="taboff"><a href="http://listas.conclase.net/" title="Listas de correo con Clase">Listas</a></li>
			</ul>
		</div>
	</div>
</div>
		<div id="navigationBarra" style="top: 90px !important; " class="SkipMeIAmAlradyAbsolutePushed">
			<ul id="tabsBarraC">
          <li id="tabBarra01"><a href="http://c.conclase.net/curso/index.php?cap=031#inicio" title="Cap ant">&lt;&lt;</a></li>
          <li id="tabBarra02"><a href="http://c.conclase.net/curso/index.php?cap=031p#inicio" title="Pág ant">&lt;</a></li>
          <li id="tabBarra03"><a href="http://c.conclase.net/curso/index.php?cap=033#inicio" title="Pág sig">&gt;</a></li>
          <li id="tabBarra04"><a href="http://c.conclase.net/curso/index.php?cap=033#inicio" title="Cap sig">&gt;&gt;</a></li>
			</ul>
			<ul id="tabsBarraL">
          <li id="tabBarra05"><a href="http://c.conclase.net/curso/#inicio" title="Curso">Curso</a></li>
          <li id="tabBarra06"><a href="http://c.conclase.net/?id=listacorreo#inicio" title="Preguntas">Info</a></li>
          <li id="tabBarra07"><a href="http://c.conclase.net/librerias/#inicio" title="Bibliotecas ANSI C">Bibliotecas</a></li>
          <li id="tabBarra08"><a href="http://c.conclase.net/curso/?cap=tabla#inicio" title="Tabla de contenido">Tabla</a></li>
          <li id="tabBarra09"><a href="http://c.conclase.net/curso/?ext=comentario&cap=032#inicio" title="Insertar comentario">Comentario</a></li>
			</ul>
		</div>
<div id="cuerpo" style="top: 108px !important; " class="SkipMeIAmAlradyAbsolutePushed">
<!-- Parte izquierda -->
<div id="izquierda">
<!-- Menú -->
<div id="menu">
<ul> <!-- capítulos -->
<li><a href="http://c.conclase.net/curso/index.php?cap=000#inicio" title="Introducción"><span class="numero">&nbsp;</span>Introducción</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=001#inicio" title="Toma de contacto"><span class="numero">1 </span>Toma de contacto</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=002#inicio" title="Tipos de variables I "><span class="numero">2 </span>Tipos de variables I </a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=003#inicio" title="Funciones I: Declaración y definición"><span class="numero">3 </span>Funciones I</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=004#inicio" title="Operadores I"><span class="numero">4 </span>Operadores I</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=005#inicio" title="Sentencias"><span class="numero">5 </span>Sentencias</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=006#inicio" title="Declaración de variables"><span class="numero">6 </span>Declaración de variables</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=007#inicio" title="Normas para la notación"><span class="numero">7 </span>Notación</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=008#inicio" title="Cadenas de caracteres"><span class="numero">8 </span>Cadenas de caracteres</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=009#inicio" title="Conversión de tipos"><span class="numero">9 </span>Conversión de tipos</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=010#inicio" title="Tipos de variables II: Arrays"><span class="numero">10 </span>Variables II: Arrays</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=011#inicio" title="Tipos de objetos III: Estructuras"><span class="numero">11 </span>Objetos III: Estructuras</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=012#inicio" title="Tipos de objetos IV: Punteros 1"><span class="numero">12 </span>Objetos IV: Punteros 1</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=013#inicio" title="Operadores II: Más operadores"><span class="numero">13 </span>Operadores II</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=014#inicio" title="Operadores III: Precedencia"><span class="numero">14 </span>Oper III: Precedencia</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=015#inicio" title="Funciones II: Parámetros por valor y por referencia"><span class="numero">15 </span>Funcs II: valor y referencia</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=016#inicio" title="Tipos de variables V: Uniones"><span class="numero">16 </span>Variables V: Uniones</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=017#inicio" title="Tipos de variables VI: Punteros 2"><span class="numero">17 </span>Variables VI: Punteros 2</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=018#inicio" title="Operadores IV: Más operadores "><span class="numero">18 </span>Operadores IV</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=019#inicio" title="Definición de tipos, tipos derivados"><span class="numero">19 </span>Definición de tipos</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=020#inicio" title="Funciones III: más cosas"><span class="numero">20 </span>Funciones III: más cosas</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=021#inicio" title="Funciones IV: Sobrecarga"><span class="numero">21 </span>Funciones IV: Sobrecarga</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=022#inicio" title="Operadores V: Operadores sobrecargados"><span class="numero">22 </span>Operadores V: Sobrecarga</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=023#inicio" title="El preprocesador"><span class="numero">23 </span>El preprocesador</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=024#inicio" title="Funciones V: Recursividad"><span class="numero">24 </span>Funciones V: Recursividad</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=025#inicio" title="Variables VII: Tipos de almacenamiento"><span class="numero">25 </span>Vbls VII: Almacenamiento</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=026#inicio" title="Espacios con nombre"><span class="numero">26 </span>Espacios con nombre</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=027#inicio" title="Clases I: definiciones"><span class="numero">27 </span>Clases I: definiciones</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=028#inicio" title="Declaración de una clase"><span class="numero">28 </span>Declaración de una clase</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=029#inicio" title="Constructores"><span class="numero">29 </span>Constructores</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=030#inicio" title="Destructores"><span class="numero">30 </span>Destructores</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=031#inicio" title="El puntero this"><span class="numero">31 </span>El puntero this</a></li>
<li><a href="./Curso de C++ - Sistema de protección_files/Curso de C++ - Sistema de protección.htm" title="Sistema de protección"><span class="numero">32 </span>Sistema de protección</a>
<ul> <!-- Niv0 -->
<li><a href="http://c.conclase.net/curso/index.php?cap=032#PRO_friend" title="Declaraciones friend">Declaraciones friend</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=032#PRO_externas" title="Funciones amigas externas">Funciones amigas externas</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=032#PRO_clases" title="Funciones amigas en otras clases">Amigas en otras clases</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=032#PRO_friclases" title="Clases amigas">Clases amigas</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=032#PRO_reservadas" title="Palabras reservadas usadas en este capítulo">Palabras reservadas 32</a></li>
</ul><!-- Niv1 -->
</li>
<li><a href="http://c.conclase.net/curso/index.php?cap=033#inicio" title="Modificadores para miembros"><span class="numero">33 </span>Modificadores</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=034#inicio" title="Más sobre las funciones"><span class="numero">34 </span>Más sobre las funciones</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=035#inicio" title="Operadores sobrecargados"><span class="numero">35 </span>Operadores sobrecargados</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=036#inicio" title="Herencia"><span class="numero">36 </span>Herencia</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=037#inicio" title="Funciones virtuales"><span class="numero">37 </span>Funciones virtuales</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=038#inicio" title="Derivación múltiple"><span class="numero">38 </span>Derivación múltiple</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=039#inicio" title="Trabajar con ficheros"><span class="numero">39 </span>Trabajar con ficheros</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=040#inicio" title="Plantillas"><span class="numero">40 </span>Plantillas</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=041#inicio" title="Punteros a miembros de clases o estructuras"><span class="numero">41 </span>Punteros a miembros</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=042#inicio" title="Castings en C++"><span class="numero">42 </span>Castings en C++</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=043#inicio" title="Manejo de excepciones"><span class="numero">43 </span>Manejo de excepciones</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=900#inicio" title="Codificación ASCII"><span class="numero">A </span>Codificación ASCII</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=901#inicio" title="Palabras reservadas"><span class="numero">B </span>Palabras reservadas</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=902#inicio" title="Bibliotecas estándar"><span class="numero">C </span>Bibliotecas estándar</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=903#inicio" title="Trigrafos y símbolos alternativos"><span class="numero">D </span>Trigrafos y símbolos alt.</a></li>
<li><a href="http://c.conclase.net/curso/index.php?cap=904#inicio" title="Streams"><span class="numero">E </span>Streams</a></li>
</ul> <!-- capítulos -->
</div>
</div> <!-- izquierda -->
<div id="derecha">
<a name="inicio"></a>
<div class="texto">
<h1>32 Sistema de protección</h1>
<div class="titulo_flecha"><a href="./Curso de C++ - Sistema de protección_files/Curso de C++ - Sistema de protección.htm">^</a></div>

<p>Ya sabemos que los miembros privados de una clase no son accesibles para 
  funciones y clases exteriores a dicha clase.</p>
<p>Este es uno de los conceptos de POO, el <i>encapsulamiento</i>, que tiene como
  objetivo hacer que lo que pase en el interior de cada objeto sea inaccesible
  desde el exterior, y que el comportamiento de otros objetos no pueda influir
  en él. Cada objeto sólo responde a ciertos mensajes y proporciona 
  determinadas salidas.</p>
<p>Pero, en ciertas ocasiones, necesitaremos tener acceso a determinados miembros 
  de un objeto de una clase desde otros objetos de clases diferentes, pero sin
  perder ese encapsulamiento para el resto del programa, es decir, manteniendo
  esos miembros como privados.</p> 
<p>C++ proporciona un mecanismo para sortear el sistema de protección. En 
  otros capítulos veremos la utilidad de esta técnica, pero de momento 
  sólo explicaremos en qué consiste.</p>
<a name="PRO_friend"></a></div>
<div class="texto">
<h2>Declaraciones friend</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Sistema de protección_files/Curso de C++ - Sistema de protección.htm">^</a></div>

<p>El modificador <b>friend</b> puede aplicarse a clases o funciones para 
  inhibir el sistema de protección.</p>
<p>Las relaciones de "amistad" entre clases son parecidas a las amistades 
  entre personas:</p>
<ul>
  <li>La amistad no puede transferirse, si A es amigo de B, y B es amigo de C, 
    esto no implica que A sea amigo de C. (La famosa frase: "los amigos de 
    mis amigos son mis amigos" es falsa en C++, y probablemente también 
    en la vida real).</li>
  <li>La amistad no puede heredarse. Si A es amigo de B, y C es una clase derivada 
    de B, A no es amigo de C. (Los hijos de mis amigos, no tienen por qué 
    ser amigos míos. De nuevo, el símil es casi perfecto).</li>
  <li>La amistad no es simétrica. Si A es amigo de B, B no tiene por qué 
    ser amigo de A. (En la vida real, una situación como esta hará 
    peligrar la amistad de A con B, pero de nuevo me temo que en realidad se trata de 
    una situación muy frecuente, y normalmente A no sabe que B no se considera su
    amigo).</li>
</ul>
<a name="PRO_externas"></a></div>
<div class="texto">
<h2>Funciones amigas externas</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Sistema de protección_files/Curso de C++ - Sistema de protección.htm">^</a></div>

<p>El caso más sencillo es el de una relación de amistad con una 
  función externa.</p>
<p>Veamos un ejemplo muy sencillo:</p>
<pre class="ejemplo"><span class="prp">#include</span> &lt;iostream&gt;
<span class="cpp">using</span> <span class="cpp">namespace</span> std;
 
<span class="cpp">class</span> A {
  <span class="cpp">public</span>:
    A(<span class="cpp">int</span> i=0) : a(i) {}
    <span class="cpp">void</span> Ver() { cout &lt;&lt; a &lt;&lt; endl; }
  <span class="cpp">private</span>:
    <span class="cpp">int</span> a;
    <span class="cpp">friend</span> <span class="cpp">void</span> Ver(A); // "Ver" es amiga de la clase A
};
 
<span class="cpp">void</span> Ver(A Xa) {
   // La función Ver puede acceder a miembros privados
   // de la clase A, ya que ha sido declarada "amiga" de A
   cout &lt;&lt; Xa.a &lt;&lt; endl;
}

<span class="cpp">int</span> main() {
   A Na(10);
 
   Ver(Na);  // Ver el valor de Na.a
   Na.Ver(); // Equivalente a la anterior

   <span class="cpp">return</span> 0;
}
</pre>

<p>Como puedes ver, la función "Ver", que no pertenece a la clase 
  A puede acceder al miembro privado de A y visualizarlo. Incluso podría 
  modificarlo.</p>
<p>No parece que sea muy útil, ¿verdad?. Bueno, seguro que en alguna 
  ocasión tiene aplicaciones prácticas.</p>
<a name="PRO_clases"></a></div>
<div class="texto">
<h2>Funciones amigas en otras clases</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Sistema de protección_files/Curso de C++ - Sistema de protección.htm">^</a></div>

<p>El siguiente caso es más común, se trata de cuando la función 
  amiga forma parte de otra clase. El proceso es más complejo. Veamos otro 
  ejemplo:</p>
<pre class="ejemplo"><span class="prp">#include</span> &lt;iostream&gt;
<span class="cpp">using</span> <span class="cpp">namespace</span> std;
 
<span class="cpp">class</span> A; // Declaración previa (forward)
 
<span class="cpp">class</span> B {
   <span class="cpp">public</span>:
    B(<span class="cpp">int</span> i=0) : b(i) {}
    <span class="cpp">void</span> Ver() { cout &lt;&lt; b &lt;&lt; endl; }
    <span class="cpp">bool</span> EsMayor(A Xa);  // Compara b con a
   <span class="cpp">private</span>:
    <span class="cpp">int</span> b;
};

<span class="cpp">class</span> A {
   <span class="cpp">public</span>:
    A(<span class="cpp">int</span> i=0) : a(i) {}
    <span class="cpp">void</span> Ver() { cout &lt;&lt; a &lt;&lt; endl; }
   <span class="cpp">private</span>:
    // Función amiga tiene acceso 
    // a miembros privados de la clase A
    <span class="cpp">friend</span> <span class="cpp">bool</span> B::EsMayor(A Xa); 
    <span class="cpp">int</span> a;
};

<span class="cpp">bool</span> B::EsMayor(A Xa) {
   <span class="cpp">return</span> b &gt; Xa.a;
}

<span class="cpp">int</span> main() {
   A Na(10);
   B Nb(12);
   
   Na.Ver();
   Nb.Ver();
   <span class="cpp">if</span>(Nb.EsMayor(Na)) cout &lt;&lt; "Nb es mayor que Na" &lt;&lt; endl;
   <span class="cpp">else</span> cout &lt;&lt; "Nb no es mayor que Na" &lt;&lt; endl;
   
   <span class="cpp">return</span> 0;
}
</pre>

<p>Puedes comprobar lo que pasa si eliminas la línea donde se declara "EsMayor" 
  como amiga de A.</p>
<p>Es necesario hacer una declaración previa de la clase A (forward) para 
  que pueda referenciarse desde la clase B.</p>
<p>Veremos que estas "amistades" son útiles cuando sobrecarguemos 
  algunos operadores.</p>
<a name="PRO_friclases"></a></div>
<div class="texto">
<h2>Clases amigas</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Sistema de protección_files/Curso de C++ - Sistema de protección.htm">^</a></div>

<p>El caso más común de amistad se aplica a clases completas. Lo 
  que sigue es un ejemplo de implementación de una lista dinámica 
  mediante el uso de dos clases "amigas".</p>
<pre class="ejemplo"><span class="prp">#include</span> &lt;iostream&gt;
<span class="cpp">using</span> <span class="cpp">namespace</span> std;
 
/* Clase para elemento de lista enlazada */
<span class="cpp">class</span> Elemento {
  <span class="cpp">public</span>:
   Elemento(<span class="cpp">int</span> t);                           /* Constructor */
   <span class="cpp">int</span> Tipo() { <span class="cpp">return</span> tipo;}                /* Obtener tipo */
  <span class="cpp">private</span>:                                         /* Datos: */
   <span class="cpp">int</span> tipo;                                         /* Tipo */
   Elemento *sig;                      /* Siguiente elemento */
  <span class="cpp">friend</span> <span class="cpp">class</span> Lista;                   /* Amistad con lista */
};

/* Clase para lista enlazada de números*/
<span class="cpp">class</span> Lista {
  <span class="cpp">public</span>:
   Lista() : Cabeza(NULL) {}                  /* Constructor */
                                              /* Lista vacía */
   ~Lista() { LiberarLista(); }                /* Destructor */
   <span class="cpp">void</span> Nuevo(<span class="cpp">int</span> tipo);                  /* Insertar figura */
   Elemento *Primero()            /* Obtener primer elemento */
   { <span class="cpp">return</span> Cabeza; }            
   /* Obtener el siguiente elemento a p */
   Elemento *Siguiente(Elemento *p) {
      <span class="cpp">if</span>(p) <span class="cpp">return</span> p-&gt;sig; <span class="cpp">else</span> <span class="cpp">return</span> p;}; 
   /* Si p no es NULL */
   /* Averiguar si la lista está vacía */
   <span class="cpp">bool</span> EstaVacio() { <span class="cpp">return</span> Cabeza == NULL;}

  <span class="cpp">private</span>:
   Elemento *Cabeza;           /* Puntero al primer elemento */
   <span class="cpp">void</span> LiberarLista(); /* Función privada para borrar lista */
};

/* Constructor */
Elemento::Elemento(<span class="cpp">int</span> t) : tipo(t), sig(NULL) {}
  /* Asignar datos desde lista de parámetros */

/* Añadir nuevo elemento al principio de la lista */
<span class="cpp">void</span> Lista::Nuevo(<span class="cpp">int</span> tipo) {
   Elemento *p;
   
   p = <span class="cpp">new</span> Elemento(tipo);  /* Nuevo elemento */
   p-&gt;sig = Cabeza;
   Cabeza = p;
}

/* Borra todos los elementos de la lista */
<span class="cpp">void</span> Lista::LiberarLista() {
   Elemento *p;
   
   <span class="cpp">while</span>(Cabeza) {
      p = Cabeza;
      Cabeza = p-&gt;sig;
      <span class="cpp">delete</span> p;
   }
}

<span class="cpp">int</span> main() {
   Lista miLista;
   Elemento *e;
   
   // Insertamos varios valores en la lista   
   miLista.Nuevo(4);
   miLista.Nuevo(2);
   miLista.Nuevo(1);

   // Y los mostramos en pantalla:
   e = miLista.Primero();
   <span class="cpp">while</span>(e) {
      cout &lt;&lt; e-&gt;Tipo() &lt;&lt; " ,";
      e = miLista.Siguiente(e);
   }
   cout &lt;&lt; endl;
   
   <span class="cpp">return</span> 0;
}
</pre>

<p class="codepad">Ejecutar este código en <a href="http://codepad.org/E62pym1m" target="_blank">codepad</a>.</p>
<p>La clase Lista puede acceder a todos los miembros de Elemento, sean o no 
  públicos, pero desde la función "main" sólo podemos acceder a los miembros 
  públicos de nuestro elemento.</p>
<a name="PRO_reservadas"></a></div>
<div class="texto">
<h2>Palabras reservadas usadas en este capítulo</h2>
<div class="titulo_flecha"><a href="./Curso de C++ - Sistema de protección_files/Curso de C++ - Sistema de protección.htm">^</a></div>

<p><b>friend</b>.</p>
</div>
<div class="texto">
<h3>Comentarios de los usuarios (5)</h3>

<div id="autor"><b>JuDelCo</b><br>2011-01-05 20:56:44</div>
<div id="usertxt"><p>Se pueden definir varias amistades para una misma clase? Si es así, se declaran todas en la misma linea o linea por linea cambiando el nombre? Es decir</p>
<p>friend class Lista1,Lista2,Lista3;</p>
<p>o bien...</p>
<p>friend class Lista1;</p>
<p>friend class Lista2;</p>
<p>friend class Lista3;</p>
<p>Es la duda que tengo</p></div>
<div id="autor"><b>Salvador Pozo</b><br>2011-01-10 16:35:16</div>
<div id="usertxt"><p>Se pueden definir tantas amistades como sea necesario para cada clase. La forma correcta de definirlas es la segunda:</p>
<p>friend class Lista1;</p>
<p>friend class Lista2;</p>
<p>friend class Lista3;</p>
<p>Es decir, una en cada línea. No está permitido separar los identificadores de cada clase con comas.</p>
</div>
<div id="autor"><b>aJ</b><br>2011-03-08 22:36:16</div>
<div id="usertxt"><p>Tengo unas dudas con el ejemplo de Clases amigas en la parte de :</p>
<pre class="ejemplo">Elemento *sig;
Elemento *Primero();
Elemento *Siguiente(Elemento *p);
Elemento *cabeza;</pre>
<p>Por ejemplo en 'Elemento *sig;' es un puntero que apunta a la clase Elemento ?.. y en '*Siguiente(Elemento *p);' no tengo idea de lo que es, por que involucra un puntero a función ?..</p>
<p>Saludos</p>
</div>
<div id="autor"><b>Steven</b><br>2011-03-09 00:07:57</div>
<div id="usertxt"><p>Hola AJ,</p>
<pre class="ejemplo">Elemento *sig;
</pre>
<p>Sí; 'sig' es un puntero a 'Elemento'.</p>
<pre class="ejemplo">Elemento *Siguiente( Elemento *p );
</pre>
<p>Aquí tenemos la función 'Siguiente()', que acepta un puntero a 'Elemento' y retorna un puntero a 'Elemento'. Recuerda que la sintaxis del prototipo de una función es la siguiente:</p>
<pre class="ejemplo">&lt;tipo_retorno&gt; &lt;nombre_función&gt; ( &lt;lista_de_parámetros&gt; );
</pre>
<p>Aplicando el prototipo de 'Siguiente()' a esta sintaxis vemos que tenemos,</p>
<pre class="ejemplo">&lt;tipo_retorno&gt; = Elemento *
&lt;nombre_función&gt; = Siguiente
&lt;lista_de_parámetros&gt; = Elemento *
</pre>
<p>Si quieres, puedes reescribir el prototipo así:</p>
<pre class="ejemplo">Elemento * Siguiente( Elemento *p );
</pre>
<p>O incluso,</p>
<pre class="ejemplo">Elemento* Siguiente( Elemento *p );
</pre>
<p>Espero haber aclarado las dudas.</p>
<p>Steven</p>
</div>
<div id="autor"><b>aJ</b><br>2011-03-09 00:59:28</div>
<div id="usertxt"><p>Gracias por responderme Steven ya aclare las dudas.</p></div>
</div>
</div>
</div>
<div id="pie">
<p id="copyright">© Marzo de 2001, Salvador Pozo, <a href="mailto:salvador@conclase.net">salvador@conclase.net</a></p>
</div>


<div class="SkipThisFixedPosition top-iframe-wrapper" style="width: 100%; height: 34px; position: fixed; top: 0px !important; left: 0px; z-index: 99997; "><iframe style="width:100%;height:34px;top:0px;left:0px;" src="./Curso de C++ - Sistema de protección_files/container.htm" scrolling="no" class="toolbarContainer" frameborder="0px" id="CWTBiframe0"></iframe></div><div id="-chrome-auto-translate-plugin-dialog" style="display: none; opacity: 1 !important; background-image: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; background-color: transparent !important; padding-top: 0px !important; padding-right: 0px !important; padding-bottom: 0px !important; padding-left: 0px !important; margin-top: 0px !important; margin-right: 0px !important; margin-bottom: 0px !important; margin-left: 0px !important; position: absolute !important; top: 0px; left: 0px; overflow-x: visible !important; overflow-y: visible !important; z-index: 999999 !important; text-align: left !important; background-position: initial initial !important; background-repeat: initial initial !important; "><div style="max-width: 300px !important;color: #fafafa !important;opacity: 0.8 !important;border-color: #000000 !important;border-width: 0px !important;-webkit-border-radius: 10px !important;background-color: #363636 !important;font-size: 16px !important;padding: 8px !important;overflow: visible !important;background-image: -webkit-gradient(linear, left top, right bottom, color-stop(0%, #000), color-stop(50%, #363636), color-stop(100%, #000));z-index: 999999 !important;text-align: left  !important;"><div class="translate"></div><div class="additional"></div></div><img src="./Curso de C++ - Sistema de protección_files/small-logo.png" onclick="document.location.href=&#39;http://translate.google.com/&#39;;" style="position: absolute !important; z-index: -1 !important; right: 1px !important; top: -20px !important; cursor: pointer !important;-webkit-border-radius: 20px; background-color: rgba(200, 200, 200, 0.3) !important; padding: 3px 5px 0 !important; margin: 0 !important;"></div><div id="mainContainer_CTID"><div class="fixedDiv SkipThisFixedPosition UrlGadgetsDiv" style="position: fixed; left: 0px; top: 34px !important; z-index: 2147483640; "></div><div class="fixedDiv SkipThisFixedPosition GeneralGadgetsDiv" style="position: fixed; left: 0px; top: 34px !important; z-index: 2147483640; width: 100%; "></div></div></body><style type="text/css" id="CWToolbarStyle">html { padding-top: 34px !important;}</style></html>